#include "ros/ros.h"
#include "active_var/ActiveVaRQuery.h"
#include <cstdlib>
#include <string>
#include <vector>
#include <sstream>

using namespace std;

int main(int argc, char **argv)
{
  ros::init(argc, argv, "active_var_client");
  if (argc != 3)
  {
    ROS_INFO("usage: active_var_client width height");
    return 1;
  }



  ros::NodeHandle n;
  ros::ServiceClient client = n.serviceClient<active_var::ActiveVaRQuery>("active_var");
  active_var::ActiveVaRQuery srv;
  srv.request.width = atoll(argv[1]);
  srv.request.height = atoll(argv[2]);
  unsigned int numStates = atoll(argv[1]) * atoll(argv[2]);
  vector<unsigned int> init_states;
  for(unsigned int i=0; i<numStates; i++)
    init_states.push_back(i);
  vector<unsigned int> term_states;
  srv.request.discount = 0.95;
  srv.request.initial_states = init_states;
  srv.request.terminal_states = term_states;
  if (client.call(srv))
  {
        std::stringstream ss;

        for(int i=0; i<srv.request.size; i++)
        {
            ss << srv.response.policy[i] << " ";

        }
        ROS_INFO("Array: %s", ss.str().c_str());
  }
  else
  {
    ROS_ERROR("Failed to call service active_var");
    return 1;
  }

  return 0;
}
